#define CHIP_6713

#include "dsk6713.h"
#include "dsk6713_aic23.h"
#include "dsk6713_dip.h"
#include "dsk6713_led.h"
#include "tmwtypes.h"

Uint32 Leftchannel,Rightchannel,data,x,y,leftshifted_data ;

const real64_T h1[61] = {
  -0.004123397242968,-0.004319648041148,-0.004730186630302,-0.005337519452139,
  -0.006102813308279,-0.006967119673328,-0.007853789371039,-0.008671982658882,
  -0.009321119542389, -0.00969606191098,-0.009692775775787,-0.009214190938043,
  -0.008175958644844,-0.006511806294115, -0.00417820233836,-0.001158073696841,
   0.002536639089752, 0.006863749084352,  0.01175100899833,  0.01709774295706,
    0.02277787900983,  0.02864426686613,  0.03453409977008,  0.04027520223567,
    0.04569289955554,  0.05061715299792,  0.05488962815148,  0.05837036390628,
    0.06094372616376,  0.06252336278914,  0.06305592297801,  0.06252336278914,
    0.06094372616376,  0.05837036390628,  0.05488962815148,  0.05061715299792,
    0.04569289955554,  0.04027520223567,  0.03453409977008,  0.02864426686613,
    0.02277787900983,  0.01709774295706,  0.01175100899833, 0.006863749084352,
   0.002536639089752,-0.001158073696841, -0.00417820233836,-0.006511806294115,
  -0.008175958644844,-0.009214190938043,-0.009692775775787, -0.00969606191098,
  -0.009321119542389,-0.008671982658882,-0.007853789371039,-0.006967119673328,
  -0.006102813308279,-0.005337519452139,-0.004730186630302,-0.004319648041148,
  -0.004123397242968
};




const real64_T h2[61] = {
  -5.381344186458e-05,0.0001918720505096,0.0005931539717597, 0.001204390532974,
   0.002068449653099, 0.003184464056031, 0.004475789950351, 0.005767555790765,
   0.006782540466372, 0.007161354060394, 0.006508389959933, 0.004459553977031,
  0.0007623997197762,-0.004644872479395, -0.01157109232603, -0.01954121120034,
   -0.02780782520536, -0.03540992772496, -0.04127590902361,  -0.0443597731854,
   -0.04379266508139, -0.03902741099035, -0.02995282910046, -0.01695745584225,
  -0.000928800935112,  0.01681660941163,  0.03466671733613,  0.05089523806719,
    0.06386712194364,  0.07223999813932,  0.07513318281867,  0.07223999813932,
    0.06386712194364,  0.05089523806719,  0.03466671733613,  0.01681660941163,
  -0.000928800935112, -0.01695745584225, -0.02995282910046, -0.03902741099035,
   -0.04379266508139,  -0.0443597731854, -0.04127590902361, -0.03540992772496,
   -0.02780782520536, -0.01954121120034, -0.01157109232603,-0.004644872479395,
  0.0007623997197762, 0.004459553977031, 0.006508389959933, 0.007161354060394,
   0.006782540466372, 0.005767555790765, 0.004475789950351, 0.003184464056031,
   0.002068449653099, 0.001204390532974,0.0005931539717597,0.0001918720505096,
  -5.381344186458e-05
};



const real64_T h3[61] = {
   0.002230445661942, 0.002323199423641, 0.002559050283281, 0.002939407179309,
   0.003463777730948, 0.004129750447853, 0.004933003315127, 0.005867338835932,
   0.006924745234632, 0.008095483146703, 0.009368196753102,  0.01073004796187,
    0.01216687190354,   0.0136633516947,   0.0152032101399,  0.01676941579111,
     0.0183444005688,  0.01991028597354,  0.02144911478404,   0.0229430850488,
    0.02437478313555,  0.02572741260612,  0.02698501573396,  0.02813268457755,
    0.02915675866265,  0.03004500650911,  0.03078678846058,  0.03137319853442,
    0.03179718330164,  0.03205363612746,  0.03213946544862,  0.03205363612746,
    0.03179718330164,  0.03137319853442,  0.03078678846058,  0.03004500650911,
    0.02915675866265,  0.02813268457755,  0.02698501573396,  0.02572741260612,
    0.02437478313555,   0.0229430850488,  0.02144911478404,  0.01991028597354,
     0.0183444005688,  0.01676941579111,   0.0152032101399,   0.0136633516947,
    0.01216687190354,  0.01073004796187, 0.009368196753102, 0.008095483146703,
   0.006924745234632, 0.005867338835932, 0.004933003315127, 0.004129750447853,
   0.003463777730948, 0.002939407179309, 0.002559050283281, 0.002323199423641,
   0.002230445661942
};




const real64_T h4[61] = {
   0.001693659212199, 0.001817214219835, 0.002057849446316, 0.002425549042043,
    0.00292804483728, 0.003570628367865, 0.004356006562517, 0.005284203988557,
   0.006352513702442, 0.007555497861814, 0.008885038343064,  0.01033043668964,
    0.01187856180829,  0.01351404295007,  0.01521950467625,  0.01697583973188,
    0.01876251504628,  0.02055790546249,    0.022339649279,  0.02408501927578,
    0.02577130260132,  0.02737618272209,  0.02887811658576,  0.03025670022423,
      0.031493016221,  0.03256995678691,  0.03347251662186,  0.03418805028053,
    0.03470648939767,  0.03502051585051,  0.03512568773085,  0.03502051585051,
    0.03470648939767,  0.03418805028053,  0.03347251662186,  0.03256995678691,
      0.031493016221,  0.03025670022423,  0.02887811658576,  0.02737618272209,
    0.02577130260132,  0.02408501927578,    0.022339649279,  0.02055790546249,
    0.01876251504628,  0.01697583973188,  0.01521950467625,  0.01351404295007,
    0.01187856180829,  0.01033043668964, 0.008885038343064, 0.007555497861814,
   0.006352513702442, 0.005284203988557, 0.004356006562517, 0.003570628367865,
    0.00292804483728, 0.002425549042043, 0.002057849446316, 0.001817214219835,
   0.001693659212199
};






union {Uint32 combo;short channel[2];} temp;
Uint32 Leftchannel,Rightchannel,data;
int a=0;
int main(void)
{
    DSK6713_AIC23_CodecHandle hCodec;
    DSK6713_AIC23_Config config=DSK6713_AIC23_DEFAULTCONFIG ;

    DSK6713_init();
    DSK6713_DIP_init();
    DSK6713_LED_init();
    hCodec= DSK6713_AIC23_openCodec(0, &config);
    DSK6713_AIC23_setFreq(hCodec, DSK6713_AIC23_FREQ_44KHZ);




    while(1){


        if(DSK6713_DIP_get(0)==0)   //guitar
    	{
            float samples[60];
       	    float result = 0.0;
            while(!DSK6713_AIC23_read(hCodec,&data));
            for (a=60;a>=1;a--)
            samples[a] = samples[a-1];
            temp.combo = data;
            samples[0] = (float) temp.channel[0];
            for(a=0;a<61;a++)
            result += h1[a]*samples[a];
	    result=(3*result);
        

	    while (!DSK6713_AIC23_write(hCodec, (short)result));
            DSK6713_LED_on(0);
    	}

    else if(DSK6713_DIP_get(1)==0)      //violin
    	{
            float samples[60];
       	    float result1 = 0.0;
            while(!DSK6713_AIC23_read(hCodec,&data));
            for (a=60;a>=1;a--)
            samples[a] = samples[a-1];
            temp.combo = data;
            samples[0] = (float) temp.channel[0];
            for(a=0;a<61;a++)
            result1 += h2[a]*samples[a];
	    result1=(3*result1);

	    while (!DSK6713_AIC23_write(hCodec, (short)result1));
            DSK6713_LED_on(1);
    	}

    else if(DSK6713_DIP_get(2)==0)          //men
    	{
            float samples[60];
       	    float result2 = 0.0;
            while(!DSK6713_AIC23_read(hCodec,&data));
            for (a=60;a>=1;a--)
            samples[a] = samples[a-1];
            temp.combo = data;
            samples[0] = (float) temp.channel[0];
            for(a=0;a<61;a++)
            result2 += h3[a]*samples[a];
	    result2=(3*result2);

	    while (!DSK6713_AIC23_write(hCodec, (short)result2));
            DSK6713_LED_on(2);
    	}

    else if (DSK6713_DIP_get(3)==0)     //bass
   	 {
            float samples[60];
       	    float result3 = 0.0;
            while(!DSK6713_AIC23_read(hCodec,&data));
            for (a=60;a>=1;a--)
            samples[a] = samples[a-1];
            temp.combo = data;
            samples[0] = (float) temp.channel[0];
            for(a=0;a<61;a++)
            result3 += h4[a]*samples[a];
	    result3=(3*result3);

	    while (!DSK6713_AIC23_write(hCodec, (short)result3));
            DSK6713_LED_on(3);

    	}

    }
	return 0;
}
